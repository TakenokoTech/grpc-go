// Code generated by protoc-gen-go. DO NOT EDIT.
// source: proto/sample.proto

package proto

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type TextRequest struct {
	Text                 string   `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TextRequest) Reset()         { *m = TextRequest{} }
func (m *TextRequest) String() string { return proto.CompactTextString(m) }
func (*TextRequest) ProtoMessage()    {}
func (*TextRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_29c0c13f94a87edd, []int{0}
}

func (m *TextRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TextRequest.Unmarshal(m, b)
}
func (m *TextRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TextRequest.Marshal(b, m, deterministic)
}
func (m *TextRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TextRequest.Merge(m, src)
}
func (m *TextRequest) XXX_Size() int {
	return xxx_messageInfo_TextRequest.Size(m)
}
func (m *TextRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_TextRequest.DiscardUnknown(m)
}

var xxx_messageInfo_TextRequest proto.InternalMessageInfo

func (m *TextRequest) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

type TextReply struct {
	Text                 string   `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TextReply) Reset()         { *m = TextReply{} }
func (m *TextReply) String() string { return proto.CompactTextString(m) }
func (*TextReply) ProtoMessage()    {}
func (*TextReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_29c0c13f94a87edd, []int{1}
}

func (m *TextReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TextReply.Unmarshal(m, b)
}
func (m *TextReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TextReply.Marshal(b, m, deterministic)
}
func (m *TextReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TextReply.Merge(m, src)
}
func (m *TextReply) XXX_Size() int {
	return xxx_messageInfo_TextReply.Size(m)
}
func (m *TextReply) XXX_DiscardUnknown() {
	xxx_messageInfo_TextReply.DiscardUnknown(m)
}

var xxx_messageInfo_TextReply proto.InternalMessageInfo

func (m *TextReply) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

func init() {
	proto.RegisterType((*TextRequest)(nil), "proto.TextRequest")
	proto.RegisterType((*TextReply)(nil), "proto.TextReply")
}

func init() { proto.RegisterFile("proto/sample.proto", fileDescriptor_29c0c13f94a87edd) }

var fileDescriptor_29c0c13f94a87edd = []byte{
	// 129 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x2a, 0x28, 0xca, 0x2f,
	0xc9, 0xd7, 0x2f, 0x4e, 0xcc, 0x2d, 0xc8, 0x49, 0xd5, 0x03, 0x73, 0x84, 0x58, 0xc1, 0x94, 0x92,
	0x22, 0x17, 0x77, 0x48, 0x6a, 0x45, 0x49, 0x50, 0x6a, 0x61, 0x69, 0x6a, 0x71, 0x89, 0x90, 0x10,
	0x17, 0x4b, 0x49, 0x6a, 0x45, 0x89, 0x04, 0xa3, 0x02, 0xa3, 0x06, 0x67, 0x10, 0x98, 0xad, 0x24,
	0xcf, 0xc5, 0x09, 0x51, 0x52, 0x90, 0x53, 0x89, 0x4d, 0x81, 0x91, 0x3d, 0x17, 0x4f, 0x30, 0xd8,
	0x68, 0x97, 0xfc, 0xdc, 0xc4, 0xcc, 0x3c, 0x21, 0x7d, 0x2e, 0xf6, 0xf4, 0xd4, 0x12, 0x90, 0x1e,
	0x21, 0x21, 0x88, 0x6d, 0x7a, 0x48, 0x76, 0x48, 0x09, 0xa0, 0x88, 0x15, 0xe4, 0x54, 0x26, 0xb1,
	0x81, 0x05, 0x8c, 0x01, 0x01, 0x00, 0x00, 0xff, 0xff, 0x44, 0xe2, 0x40, 0xd5, 0xa8, 0x00, 0x00,
	0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// SampleDomainClient is the client API for SampleDomain service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SampleDomainClient interface {
	GetText(ctx context.Context, in *TextRequest, opts ...grpc.CallOption) (*TextReply, error)
}

type sampleDomainClient struct {
	cc *grpc.ClientConn
}

func NewSampleDomainClient(cc *grpc.ClientConn) SampleDomainClient {
	return &sampleDomainClient{cc}
}

func (c *sampleDomainClient) GetText(ctx context.Context, in *TextRequest, opts ...grpc.CallOption) (*TextReply, error) {
	out := new(TextReply)
	err := c.cc.Invoke(ctx, "/proto.SampleDomain/getText", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SampleDomainServer is the server API for SampleDomain service.
type SampleDomainServer interface {
	GetText(context.Context, *TextRequest) (*TextReply, error)
}

// UnimplementedSampleDomainServer can be embedded to have forward compatible implementations.
type UnimplementedSampleDomainServer struct {
}

func (*UnimplementedSampleDomainServer) GetText(ctx context.Context, req *TextRequest) (*TextReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetText not implemented")
}

func RegisterSampleDomainServer(s *grpc.Server, srv SampleDomainServer) {
	s.RegisterService(&_SampleDomain_serviceDesc, srv)
}

func _SampleDomain_GetText_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TextRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SampleDomainServer).GetText(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.SampleDomain/GetText",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SampleDomainServer).GetText(ctx, req.(*TextRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _SampleDomain_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.SampleDomain",
	HandlerType: (*SampleDomainServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "getText",
			Handler:    _SampleDomain_GetText_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/sample.proto",
}
